out_mw: nicpu, njcpu=          12          12
out_mw: nicpu, njcpu=          12          12
Binary file paper_scott_2020.mpi matches
Binary file rt_state_module.o matches
Binary file libnewrt.a matches
Binary file test_fv3_restart.mpi matches
Binary file .run_testMW.sh.swp matches
rt_state_module.f90:    call calc_proc_helper(nml_i_nicpu, global_my_iid, xbeg0, xend0, xbeg, xend)
Binary file test.exe matches
run_MW.sh:nml_i_nicpu = 16,
rt_namelist_module.f90:  integer :: nml_i_nicpu = -1
rt_namelist_module.f90:                         nml_i_nicpu,      nml_i_njcpu, &
rt_namelist_module.f90:      call namelist_check_arg(str, 'nml_i_nicpu',         value_int =nml_i_nicpu)
rt_namelist_module.f90:    if (nml_i_nicpu <= 0 .or. nml_i_njcpu <= 0 .or. nml_i_nicpu * nml_i_njcpu > nprocs) then
rt_namelist_module.f90:      nml_i_nicpu = int(sqrt(real(nprocs)))
rt_namelist_module.f90:      nml_i_njcpu = nprocs/nml_i_nicpu
rt_namelist_module.f90:    if (should_print(1)) print *, 'nicpu, njcpu=', nml_i_nicpu, nml_i_njcpu
rt_namelist_module.f90:    if (nml_i_nicpu * nml_i_njcpu .ne. nprocs) then
rt_namelist_module.f90:      print *, "nicpu*njcpu != nprocs, exit"
rt_namelist_module.f90:    global_my_iid = mod( my_proc_id,nml_i_nicpu)
rt_namelist_module.f90:    global_my_jid = int( my_proc_id/nml_i_nicpu)
rt_namelist_module.f90:    call namelist_output_nc_one(fid, 'nml_i_nicpu',           error_status, value_int  = nml_i_nicpu)
Binary file .run_wrf_MW.sh.swp matches
Binary file rt_namelist_module.o matches
test_crtm_wrf.nml:  nml_i_nicpu = 64,
Binary file .copy_run_MW.sh.swp matches
run_testMW.sh:  nml_i_nicpu = 12,
run_wrf_MW_Zhang.sh:  nml_i_nicpu = 64,
Binary file paper_mw_scatt.mpi matches
run_wrf_IR_Zhang.sh:  nml_i_nicpu = 64,
